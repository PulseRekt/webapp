name: AMI-Build-ci

on:
  push:
    branches: ["main"]
    
jobs:
  validate:
    name: Validate webapp

    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:latest
        env:
          MYSQL_ROOT_PASSWORD: ${{ secrets.DB_PASSWORD }}
          MYSQL_DATABASE: ${{ secrets.DB_DATABASE }}


        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    strategy:
      matrix:
        node-version:
          - 14.x
          - 16.x

    env:
      DB_HOST: localhost
      DB_PORT: 3306
      DB_DATABASE: cloud
      DB_USERNAME: root
      DB_PASSWORD: Thenothing1!
      FILE_PATH: ./opt/users.csv
    
    steps:
    - name: checkout
      uses: actions/checkout@v3

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }} 
        cache: 'npm'

    - name: Install Dependencies
      run: npm install

    - name: Installing nodemon
      run: npm install nodemon
    
    - name: Run Jest Tests
      run: npm test

  build:
    name: Build Ami
    runs-on: ubuntu-latest
    needs: validate 

    env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}


    steps:
        - name: checkout
          uses: actions/checkout@v3

        - name: Setup Packer
          uses: hashicorp/setup-packer@main
          id: setup
          with:
              version: "latest"

        # - name: setup .env
        #   run: |
        #     echo "DB_HOST=127.0.0.1" >> .env
        #     echo "DB_PORT=3306" >> .env
        #     echo "DB_DATABASE=cloud" >> .env
        #     echo "DB_USERNAME=root" >> .env
        #     echo "DB_PASSWORD=Thenothing1!" >> .env
        #     echo "FILE_PATH=./opt/users.csv" >> .env
          
          

        - name: Build Artifact
          run: zip -r web-app.zip . -x ".git*" -x ".github*"
            

        - name: Publish Web App Artifact
          uses: actions/upload-artifact@v2
          with:
                name: web-app
                path: web-app.zip
        
        - name: check path
          run: |
                pwd
                ls /home/runner/work/webapp/webapp

        - name: Packer init
          run: |
                packer init packer/aws-debian.pkr.hcl
                  
        - name: Format Check Pakcer File
          run: |
                if ! packer fmt -check packer/aws-debian.pkr.hcl; then
                    echo "Packer file formatting check failed. Exiting the pipeline."
                    exit 1
                  fi
                  
        - name: Validate Packer File
          run: |
                if ! packer validate packer/aws-debian.pkr.hcl; then
                  echo "Packer validation check failed. Exiting the pipeline."
                  exit 1
                fi

        - name: setup Enviroment variables
          run: |
            export DB_HOST=${{ secrets.DB_HOST }}
            export DB_PORT=${{ secrets.DB_PORT }}
            export DB_DATABASE=${{ secrets.DB_DATABASE }}
            export DB_USERNAME=${{ secrets.DB_USERNAME }}
            export DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            export FILE_PATH=${{ secrets.FILE_PATH }}
            export AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
            export AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
                      
        - name: Build AMI
          run: |
                packer build --var-file=./packer/variable.pkvars.hcl ./packer/aws-debian.pkr.hcl





     




    
