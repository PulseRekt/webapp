name: AMI-Build-ci

on:
  push:
    branches: ["main"]
    
jobs:
  validate:
    name: Validate webapp

    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:latest
        env:
          MYSQL_ROOT_PASSWORD: ${{ secrets.DB_PASSWORD }}
          MYSQL_DATABASE: ${{ secrets.DB_DATABASE }}


        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    strategy:
      matrix:
        node-version:
          - 14.x
          - 16.x

    env:
      DB_HOST: localhost
      DB_PORT: 3306
      DB_DATABASE: cloud
      DB_USERNAME: root
      DB_PASSWORD: Thenothing1!
      FILE_PATH: ./opt/users.csv
    
    steps:
    - name: checkout
      uses: actions/checkout@v3

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }} 
        cache: 'npm'

    - name: Install Dependencies
      run: npm install

    - name: Installing nodemon
      run: npm install nodemon
    
    - name: Run Jest Tests
      run: npm test

  build:
    name: Build Ami
    runs-on: ubuntu-latest
    needs: validate 

    env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}


    steps:
        - name: checkout
          uses: actions/checkout@v3

        - name: Setup Packer
          uses: hashicorp/setup-packer@main
          id: setup
          with:
              version: "latest"

        - name: Build Artifact
          run: zip -r web-app.zip . -x ".git*" -x ".github*"
            

        - name: Publish Web App Artifact
          uses: actions/upload-artifact@v2
          with:
                name: web-app
                path: web-app.zip
        
        - name: check path
          run: |
                pwd
                ls /home/runner/work/webapp/webapp

        - name: Packer init
          run: |
                packer init packer/aws-debian.pkr.hcl
                  
        - name: Format Check Pakcer File
          run: |
                if ! packer fmt -check packer/aws-debian.pkr.hcl; then
                    echo "Packer file formatting check failed. Exiting the pipeline."
                    exit 1
                  fi
                  
        - name: Validate Packer File
          run: |
                if ! packer validate packer/aws-debian.pkr.hcl; then
                  echo "Packer validation check failed. Exiting the pipeline."
                  exit 1
                fi

        - name: setup Enviroment variables
          run: |
            export DB_HOST=${{ secrets.DB_HOST }}
            export DB_PORT=${{ secrets.DB_PORT }}
            export DB_DATABASE=${{ secrets.DB_DATABASE }}
            export DB_USERNAME=${{ secrets.DB_USERNAME }}
            export DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            export FILE_PATH=${{ secrets.FILE_PATH }}
            export AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
            export AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
                      
        - name: Build AMI
          id: build_ami
          run: |
              cd packer
              packer build --var-file=variable.pkrvars.hcl aws-debian.pkr.hcl 



  deploy:
    name: deploy AMI
    runs-on: ubuntu-latest
    needs: build 

    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.DEMO_AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.DEMO_AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: us-east-1


    steps:
        - name: checkout
          uses: actions/checkout@v3

        - name: Setup Demo Environment
          run: |
            export AWS_ACCESS_KEY_ID=${{secrets.DEMO_AWS_ACCESS_KEY_ID}}
            export AWS_SECRET_ACCESS_KEY=${{secrets.DEMO_AWS_SECRET_ACCESS_KEY}}

        - name: Get Auto Scaling Group and Launch Template
          id: get_asg_and_lt
          run: |
              LT_NAME_PREFIX="ec2Template"
            
              LT_NAME=$(aws ec2 describe-launch-templates --query "LaunchTemplates[?starts_with(LaunchTemplateName, '${LT_NAME_PREFIX}')].LaunchTemplateName" --output text)
            
              if [ -z "$LT_NAME" ]; then
                echo "No Launch Template found with the specified prefix."
                exit 1
              fi
            
              ASG_NAME=$(aws autoscaling describe-auto-scaling-groups --query "AutoScalingGroups[?contains(LaunchTemplate.LaunchTemplateName, '${LT_NAME}')].AutoScalingGroupName" --output text)
            
              if [ -z "$ASG_NAME" ]; then
                echo "No Auto Scaling Group found using the Launch Template."
                exit 1
              fi
          
              ASG_ID=$(aws autoscaling describe-auto-scaling-groups --auto-scaling-group-names $ASG_NAME --query 'AutoScalingGroups[0].AutoScalingGroupARN' --output text | cut -d':' -f 6)
              LT_ID=$(aws ec2 describe-launch-templates --launch-template-names $LT_NAME --query 'LaunchTemplates[0].LaunchTemplateId' --output text)
          
              echo "Auto Scaling Group Name: $ASG_NAME"
              echo "Auto Scaling Group ID: $ASG_ID"
              echo "Launch Template Name: $LT_NAME"
              echo "Launch Template ID: $LT_ID"

              AMI_ID=$(aws ec2 describe-images \
              --executable-users ${{secrets.USER}} \
              --query 'Images | sort_by(@, &CreationDate) | [-1].ImageId' \
              --filters "Name=name,Values=my-ami_*" \
              --output text 
              )
 
              aws ec2 create-launch-template-version --launch-template-id $LT_ID \
              --version-description "Latest AMI version" \
              --source-version 1 \
              --launch-template-data "ImageId=$AMI_ID"
            
              echo "::set-output name=asg_name::$ASG_NAME"
              echo "::set-output name=asg_id::$ASG_ID"
              echo "::set-output name=lt_name::$LT_NAME"
              echo "::set-output name=lt_id::$LT_ID"



        - name: Trigger Auto Scaling Group Instance Refresh
          run: |
            ASG_NAME="${{ steps.get_asg_and_lt.outputs.asg_name }}"

            echo "Ags_name:$ASG_NAME"
            aws autoscaling start-instance-refresh --auto-scaling-group-name $ASG_NAME --strategy Rolling
      
        
        - name: Wait for Auto Scaling Group Instance Refresh Completion
          run: |
            ASG_NAME="${{ steps.get_asg_and_lt.outputs.asg_name }}"
            REFRESH_STATUS=""
            while [[ "$REFRESH_STATUS" != "Successful" && "$REFRESH_STATUS" != "Failed" ]]; do
              REFRESH_STATUS=$(aws autoscaling describe-instance-refreshes --auto-scaling-group-name $ASG_NAME --query 'InstanceRefreshes[0].Status' --output text)

              echo "Instance Refresh Status: $REFRESH_STATUS"
              sleep 15
            done
              
            # Check the instance refresh status and fail the workflow if it failed
            if [[ "$REFRESH_STATUS" == "Failed" ]]; then
              echo "Instance refresh failed. Workflow failed."
              exit 1
            else
              echo "Instance refresh completed successfully."
            fi


          
      


